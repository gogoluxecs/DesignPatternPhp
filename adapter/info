In computer programming, the adapter design pattern (often referred to as the wrapper 
pattern or simply a wrapper) translates one interface for a class into a compatible interface. 
An adapter allows classes to work together that normally could not because of incompatible interfaces, 
by providing its interface to clients while using the original interface. 

The adapter translates calls to its interface into calls to the original interface, 
and the amount of code necessary to do this is typically small. 
The adapter is also responsible for transforming data into appropriate forms. 
For instance, if multiple boolean values are stored as a single integer but 
your consumer requires a 'true'/'false', the adapter would be responsible 
for extracting the appropriate values from the integer value.